# GitHub Actions Workflow File (.github/workflows/deploy.yml)
name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/razee-engine:latest

      - name: Deploy to DigitalOcean Droplet
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          KMS_KEY_ID: ${{ secrets.KMS_KEY_ID }}
        run: |
          # Start SSH agent and add the private key
          eval "$(ssh-agent -s)"
          echo "$SSH_PRIVATE_KEY" | ssh-add -

          # Create necessary directories
          ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} "mkdir -p /root/app/nginx /root/app/certs"

          # Transfer files to the correct locations
          scp -o StrictHostKeyChecking=no docker-compose.yml root@${DROPLET_IP}:/root/app/
          scp -o StrictHostKeyChecking=no -r nginx root@${DROPLET_IP}:/root/app/
          scp -o StrictHostKeyChecking=no -r certs root@${DROPLET_IP}:/root/app/

          # SSH into Droplet, set environment variables, stop existing containers, and run docker-compose
          ssh -o StrictHostKeyChecking=no root@${DROPLET_IP} "
            cd /root/app
            echo 'DOCKER_USERNAME=$DOCKER_USERNAME' > .env
            echo 'SECRET_KEY=$SECRET_KEY' >> .env
            echo 'AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID' >> .env
            echo 'AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY' >> .env
            echo 'S3_REGION=$S3_REGION' >> .env
            echo 'S3_BUCKET=$S3_BUCKET' >> .env
            echo 'KMS_KEY_ID=$KMS_KEY_ID' >> .env
            
            # Stop and remove existing containers
            docker-compose down
            
            # Remove any leftover containers
            docker rm -f nginx_service fastapi_service || true
            
            # Pull latest images and start services
            docker-compose pull
            docker-compose up -d
          "